% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/socketeer.R
\name{client}
\alias{client}
\alias{server}
\alias{client_local}
\alias{server_local}
\alias{listen}
\alias{selectfd}
\alias{accept}
\alias{is_open}
\alias{send}
\alias{recv}
\alias{close.client}
\alias{close.clientof}
\alias{close.server}
\alias{print.socketeer}
\alias{print.local}
\title{Internet and local socket connections}
\usage{
client(hostname = "localhost", port)

server(hostname = "localhost", port)

client_local(path = tempfile(fileext = ".socketeer"))

server_local(path = tempfile(fileext = ".socketeer"))

listen(server, backlog = 5L)

selectfd(server, timeout = 30)

accept(server)

is_open(socket)

send(socket, msg)

recv(socket, buffer_block_size = 32768L)

\method{close}{client}(socket)

\method{close}{clientof}(socket, server)

\method{close}{server}(socket)

\method{print}{socketeer}(x, ...)

\method{print}{local}(x, ...)
}
\arguments{
\item{hostname}{character(1) internet IP or host name, or "localhost".}

\item{port}{integer(1) port to connect. Port must be open.}

\item{path}{character(1) file path to be used for local socket
connections.}

\item{server}{an object of class `server`.}

\item{backlog}{integer(1) (<128) the maximum number of pending
client requests allowed.}

\item{timeout}{integer(1) number of seconds to block waiting for
incoming connections.}

\item{msg}{an R object to be serialized and transmitted between
server and client}

\item{buffer_block_size}{integer(1) size of buffer used during
receipt.}
}
\value{
`client()`: a client object.

`server()`: a server object.

`client_local()`: a client_local object.

`server_local()`: a server_local object.

`listen()`: NULL, invisibly.

`selectfd()`: a list of length 2. The first element is a
    vector of logical values indicating descriptors ready for
    reading. The second element is a vector of file descriptors.

`accept()` returns an object of class `clientof` that can
    be used to `send()` and `recv()` messages with the client.

`is_open()`: logical(1) indication that the port is open
    (TRUE) or not FALSE)

`send()`: the number of bytes transmitted, invisibly.

`recv()`: the unserialized message. `recv()` is a blocking call.
}
\description{
The `client()` / `server()` pair is used to create
    socket connections on one or more machines. This requires a
    valid hostname or IP address and open port for
    communication. The program flow is to create the `server()` and
    indicate that the server is ready to `listen()` for new
    clients. One or more clients are created using `client()`,
    which includes the client attempting to connect to the
    server. The server uses `selectfd()` and `accept()` to complete
    the client connection. Server and client are then able to
    `send()` and `recv()` messages. `serialize()` is used on
    sending, `unserialize()` on receipt.

The `client_local()` / `server_local()` pair is used
    to create socket connections on a single machine. Communication
    is via Unix files rather than host and port.
}
